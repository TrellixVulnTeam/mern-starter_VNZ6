{"ast":null,"code":"import * as api from '../api';\nimport { FETCH_ISSUES, CREATE_ISSUE } from '../types/index';\nimport { errorFlashMessage, addFlashMessage } from './helpers.js';\nexport const getIssues = (orgId, projectId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchIssues(orgId, projectId);\n    console.log(data);\n    dispatch({\n      type: FETCH_ISSUES,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n}; // export const getStickyMessage = (orgId, stickyMessageId) => async (dispatch) => {\n//   try {\n//     const { data } = await api.fetchStickyMessage(orgId, stickyMessageId);\n//     console.log(\"ACTION\")\n//     console.log(data);\n//     dispatch({\n//       type: FETCH_STICKY_MESSAGE,\n//       payload: data\n//     })\n//   } catch (error) {\n//     console.log(error)\n//     errorFlashMessage(error, dispatch, \"danger\");\n//   }\n// }\n\nexport const createIssue = (orgId, projectId, newIssue) => async (dispatch, getState) => {\n  try {\n    const {\n      data\n    } = await api.createIssue(orgId, projectId, newIssue);\n    console.log(data);\n    dispatch({\n      type: CREATE_ISSUE,\n      payload: data\n    });\n    addFlashMessage(\"Issue successfully created.\", dispatch);\n  } catch (error) {\n    console.log(error);\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n}; // export const updateStickyMessage = (stickyMessageId, postParams) => async (dispatch, getState) => {\n//   try {\n//     const { data } = await api.updateStickyMessage(stickyMessageId, postParams, getState().auth.token);\n//     dispatch({\n//       type: UPDATE_STICKY_MESSAGE,\n//       payload: data\n//     });\n//     // addFlashMessage(\"Post successfully updated.\", dispatch)\n//   } catch (error) {\n//     console.log(error);\n//     errorFlashMessage(error, dispatch, \"danger\");\n//   }\n// }\n// export const deleteStickyMessage = (stickyMessageId) => async (dispatch, getState) => {\n//   try {\n//     await api.deleteStickyMessage(stickyMessageId, getState().auth.token);\n//     dispatch({\n//       type: DELETE_STICKY_MESSAGE,\n//       payload: stickyMessageId\n//     });\n//     // addFlashMessage(\"Post successfully deleted.\", dispatch)\n//   } catch (error) {\n//     console.log(error);\n//     errorFlashMessage(error, dispatch, \"danger\");\n//   }\n// }","map":{"version":3,"sources":["/Users/mymac/repos/issue-tracker-mern/client/src/actions/issues.js"],"names":["api","FETCH_ISSUES","CREATE_ISSUE","errorFlashMessage","addFlashMessage","getIssues","orgId","projectId","dispatch","data","fetchIssues","console","log","type","payload","error","message","createIssue","newIssue","getState"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,QAArB;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AACA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,cAAnD;AAGA,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB,MAAOC,QAAP,IAAoB;AACjE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACU,WAAJ,CAAgBJ,KAAhB,EAAuBC,SAAvB,CAAvB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAD,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEZ,YADC;AAEPa,MAAAA,OAAO,EAAEL;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOM,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACC,OAAlB;AACAb,IAAAA,iBAAiB,CAACY,KAAD,EAAQP,QAAR,EAAkB,QAAlB,CAAjB;AACD;AACF,CAZM,C,CAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMS,WAAW,GAAG,CAACX,KAAD,EAAQC,SAAR,EAAmBW,QAAnB,KAAgC,OAAOV,QAAP,EAAiBW,QAAjB,KAA8B;AACvF,MAAI;AAEF,UAAM;AAAEV,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACiB,WAAJ,CAAgBX,KAAhB,EAAuBC,SAAvB,EAAkCW,QAAlC,CAAvB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAD,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX,YADC;AAEPY,MAAAA,OAAO,EAAEL;AAFF,KAAD,CAAR;AAIAL,IAAAA,eAAe,CAAC,6BAAD,EAAgCI,QAAhC,CAAf;AACD,GATD,CASE,OAAOO,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAZ,IAAAA,iBAAiB,CAACY,KAAD,EAAQP,QAAR,EAAkB,QAAlB,CAAjB;AACD;AACF,CAdM,C,CAgBP;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as api from '../api';\nimport { FETCH_ISSUES, CREATE_ISSUE } from '../types/index';\nimport { errorFlashMessage, addFlashMessage } from './helpers.js'; \n\n\nexport const getIssues = (orgId, projectId) => async (dispatch) => {\n  try {\n    const { data } = await api.fetchIssues(orgId, projectId);\n    console.log(data)\n    dispatch({\n      type: FETCH_ISSUES,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n}\n\n// export const getStickyMessage = (orgId, stickyMessageId) => async (dispatch) => {\n//   try {\n//     const { data } = await api.fetchStickyMessage(orgId, stickyMessageId);\n//     console.log(\"ACTION\")\n//     console.log(data);\n//     dispatch({\n//       type: FETCH_STICKY_MESSAGE,\n//       payload: data\n//     })\n//   } catch (error) {\n//     console.log(error)\n//     errorFlashMessage(error, dispatch, \"danger\");\n//   }\n// }\n\nexport const createIssue = (orgId, projectId, newIssue) => async (dispatch, getState) => {\n  try {\n    \n    const { data } = await api.createIssue(orgId, projectId, newIssue);\n    console.log(data);\n    dispatch({\n      type: CREATE_ISSUE,\n      payload: data\n    });\n    addFlashMessage(\"Issue successfully created.\", dispatch)\n  } catch (error) {\n    console.log(error)\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n}\n\n// export const updateStickyMessage = (stickyMessageId, postParams) => async (dispatch, getState) => {\n//   try {\n  \n//     const { data } = await api.updateStickyMessage(stickyMessageId, postParams, getState().auth.token);\n//     dispatch({\n//       type: UPDATE_STICKY_MESSAGE,\n//       payload: data\n//     });\n//     // addFlashMessage(\"Post successfully updated.\", dispatch)\n//   } catch (error) {\n//     console.log(error);\n//     errorFlashMessage(error, dispatch, \"danger\");\n//   }\n// }\n\n// export const deleteStickyMessage = (stickyMessageId) => async (dispatch, getState) => {\n//   try {\n//     await api.deleteStickyMessage(stickyMessageId, getState().auth.token);\n//     dispatch({\n//       type: DELETE_STICKY_MESSAGE,\n//       payload: stickyMessageId\n//     });\n//     // addFlashMessage(\"Post successfully deleted.\", dispatch)\n//   } catch (error) {\n//     console.log(error);\n//     errorFlashMessage(error, dispatch, \"danger\");\n//   }\n// }"]},"metadata":{},"sourceType":"module"}