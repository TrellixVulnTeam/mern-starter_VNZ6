{"ast":null,"code":"var _JSON$parse;\n\nimport axios from 'axios'; // set token if it's in localStorage\n\nlet token = (_JSON$parse = JSON.parse(localStorage.getItem('auth'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.token;\nlet configFromLocalStorage = null;\n\nif (token) {\n  configFromLocalStorage = {\n    headers: {\n      \"x-auth-token\": token\n    }\n  };\n}\n\nconst BASEURL = 'http://localhost:5000';\nconst postsURL = `${BASEURL}/posts`;\nconst logInURL = `${BASEURL}/auth/login`;\nconst usersURL = `${BASEURL}/users`; // Posts\n\nexport const fetchPosts = () => axios.get(postsURL);\nexport const fetchPost = postId => axios.get(`${postsURL}/${postId}`);\nexport const createPost = (newPost, config = configFromLocalStorage) => axios.post(postsURL, newPost, config);\nexport const updatePost = (postId, postParams, config = configFromLocalStorage) => axios.patch(`${postsURL}/${postId}`, postParams, config);\nexport const deletePost = (postId, config = configFromLocalStorage) => axios.delete(`${postsURL}/${postId}`, config); // Users\n\nexport const logIn = logInData => axios.post(logInURL, logInData);\nexport const fetchLoggedInUser = userId => axios.get(`${usersURL}/${userId}`);\nexport const updateUser = (userId, userParams, config = configFromLocalStorage) => axios.patch(`${usersURL}/${userId}`, userParams, config);\nexport const createUser = userParams => axios.post(usersURL, userParams);","map":{"version":3,"sources":["/Users/mymac/repos/mern-boilerplate/client/src/api/index.js"],"names":["axios","token","JSON","parse","localStorage","getItem","configFromLocalStorage","headers","BASEURL","postsURL","logInURL","usersURL","fetchPosts","get","fetchPost","postId","createPost","newPost","config","post","updatePost","postParams","patch","deletePost","delete","logIn","logInData","fetchLoggedInUser","userId","updateUser","userParams","createUser"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAGA;;AACA,IAAIC,KAAK,kBAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAH,gDAAG,YAA0CJ,KAAtD;AACA,IAAIK,sBAAsB,GAAG,IAA7B;;AACA,IAAIL,KAAJ,EAAW;AACTK,EAAAA,sBAAsB,GAAG;AACvBC,IAAAA,OAAO,EAAE;AACP,sBAAgBN;AADT;AADc,GAAzB;AAKD;;AAED,MAAMO,OAAO,GAAG,uBAAhB;AAEA,MAAMC,QAAQ,GAAG,GAAED,OAAQ,QAA3B;AAEA,MAAME,QAAQ,GAAI,GAAEF,OAAQ,aAA5B;AAEA,MAAMG,QAAQ,GAAI,GAAEH,OAAQ,QAA5B,C,CAIA;;AAEA,OAAO,MAAMI,UAAU,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUJ,QAAV,CAAzB;AAEP,OAAO,MAAMK,SAAS,GAAIC,MAAD,IAAYf,KAAK,CAACa,GAAN,CAAW,GAAEJ,QAAS,IAAGM,MAAO,EAAhC,CAA9B;AAEP,OAAO,MAAMC,UAAU,GAAG,CAACC,OAAD,EAAUC,MAAM,GAAGZ,sBAAnB,KAA8CN,KAAK,CAACmB,IAAN,CAAWV,QAAX,EAAqBQ,OAArB,EAA8BC,MAA9B,CAAjE;AAEP,OAAO,MAAME,UAAU,GAAG,CAACL,MAAD,EAASM,UAAT,EAAqBH,MAAM,GAAGZ,sBAA9B,KAAyDN,KAAK,CAACsB,KAAN,CAAa,GAAEb,QAAS,IAAGM,MAAO,EAAlC,EAAqCM,UAArC,EAAiDH,MAAjD,CAA5E;AAEP,OAAO,MAAMK,UAAU,GAAG,CAACR,MAAD,EAASG,MAAM,GAAGZ,sBAAlB,KAA6CN,KAAK,CAACwB,MAAN,CAAc,GAAEf,QAAS,IAAGM,MAAO,EAAnC,EAAsCG,MAAtC,CAAhE,C,CAGP;;AAEA,OAAO,MAAMO,KAAK,GAAIC,SAAD,IAAe1B,KAAK,CAACmB,IAAN,CAAWT,QAAX,EAAqBgB,SAArB,CAA7B;AAEP,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAY5B,KAAK,CAACa,GAAN,CAAW,GAAEF,QAAS,IAAGiB,MAAO,EAAhC,CAAtC;AAEP,OAAO,MAAMC,UAAU,GAAG,CAACD,MAAD,EAASE,UAAT,EAAqBZ,MAAM,GAAGZ,sBAA9B,KAAyDN,KAAK,CAACsB,KAAN,CAAa,GAAEX,QAAS,IAAGiB,MAAO,EAAlC,EAAqCE,UAArC,EAAiDZ,MAAjD,CAA5E;AAEP,OAAO,MAAMa,UAAU,GAAID,UAAD,IAAgB9B,KAAK,CAACmB,IAAN,CAAWR,QAAX,EAAqBmB,UAArB,CAAnC","sourcesContent":["import axios from 'axios';\n\n\n// set token if it's in localStorage\nlet token = JSON.parse(localStorage.getItem('auth'))?.token;\nlet configFromLocalStorage = null;\nif (token) {\n  configFromLocalStorage = { \n    headers: { \n      \"x-auth-token\": token\n    }\n  }\n} \n\nconst BASEURL = 'http://localhost:5000';\n\nconst postsURL =`${BASEURL}/posts`;\n\nconst logInURL = `${BASEURL}/auth/login`;\n\nconst usersURL = `${BASEURL}/users`\n\n\n\n// Posts\n\nexport const fetchPosts = () => axios.get(postsURL);\n\nexport const fetchPost = (postId) => axios.get(`${postsURL}/${postId}`);\n\nexport const createPost = (newPost, config = configFromLocalStorage) => axios.post(postsURL, newPost, config);\n\nexport const updatePost = (postId, postParams, config = configFromLocalStorage) => axios.patch(`${postsURL}/${postId}`, postParams, config)\n\nexport const deletePost = (postId, config = configFromLocalStorage) => axios.delete(`${postsURL}/${postId}`, config);\n\n\n// Users\n\nexport const logIn = (logInData) => axios.post(logInURL, logInData);\n\nexport const fetchLoggedInUser = (userId) => axios.get(`${usersURL}/${userId}`);\n\nexport const updateUser = (userId, userParams, config = configFromLocalStorage) => axios.patch(`${usersURL}/${userId}`, userParams, config)\n\nexport const createUser = (userParams) => axios.post(usersURL, userParams);\n\n"]},"metadata":{},"sourceType":"module"}