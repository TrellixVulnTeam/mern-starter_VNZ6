{"ast":null,"code":"import * as api from '../api';\nimport { FETCH_ISSUES, CREATE_ISSUE, DELETE_ISSUE, UPDATE_ISSUE } from '../types/index';\nimport { errorFlashMessage, addFlashMessage } from './helpers.js';\nexport const getIssues = (orgId, projectId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchIssues(orgId, projectId);\n    dispatch({\n      type: FETCH_ISSUES,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n}; // export const getStickyMessage = (orgId, stickyMessageId) => async (dispatch) => {\n//   try {\n//     const { data } = await api.fetchStickyMessage(orgId, stickyMessageId);\n//     console.log(\"ACTION\")\n//     console.log(data);\n//     dispatch({\n//       type: FETCH_STICKY_MESSAGE,\n//       payload: data\n//     })\n//   } catch (error) {\n//     console.log(error)\n//     errorFlashMessage(error, dispatch, \"danger\");\n//   }\n// }\n\nexport const createIssue = (orgId, projectId, newIssue) => async (dispatch, getState) => {\n  try {\n    const {\n      data\n    } = await api.createIssue(orgId, projectId, newIssue);\n    dispatch({\n      type: CREATE_ISSUE,\n      payload: data\n    });\n    addFlashMessage(\"Issue successfully created.\", dispatch);\n  } catch (error) {\n    console.log(error);\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n};\nexport const updateIssue = (orgId, projectId, issueId, issueParams) => async (dispatch, getState) => {\n  try {\n    const {\n      data\n    } = await api.updateIssue(orgId, projectId, issueId, issueParams);\n    dispatch({\n      type: UPDATE_ISSUE,\n      payload: data\n    }); // addFlashMessage(\"Post successfully updated.\", dispatch)\n  } catch (error) {\n    console.log(error);\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n};\nexport const deleteIssue = (orgId, projectId, issueId) => async (dispatch, getState) => {\n  try {\n    await api.deleteIssue(orgId, projectId, issueId);\n    dispatch({\n      type: DELETE_ISSUE,\n      payload: issueId\n    });\n    addFlashMessage(\"Issue successfully deleted.\", dispatch);\n  } catch (error) {\n    console.log(error);\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n};","map":{"version":3,"sources":["/Users/mymac/repos/issue-tracker-mern/client/src/actions/issues.js"],"names":["api","FETCH_ISSUES","CREATE_ISSUE","DELETE_ISSUE","UPDATE_ISSUE","errorFlashMessage","addFlashMessage","getIssues","orgId","projectId","dispatch","data","fetchIssues","type","payload","error","console","log","message","createIssue","newIssue","getState","updateIssue","issueId","issueParams","deleteIssue"],"mappings":"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","sourcesContent":["import * as api from '../api';\nimport { FETCH_ISSUES, CREATE_ISSUE, DELETE_ISSUE, UPDATE_ISSUE } from '../types/index';\nimport { errorFlashMessage, addFlashMessage } from './helpers.js'; \n\nexport const getIssues = (orgId, projectId) => async (dispatch) => {\n  try {\n    const { data } = await api.fetchIssues(orgId, projectId);\n    dispatch({\n      type: FETCH_ISSUES,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n}\n\n// export const getStickyMessage = (orgId, stickyMessageId) => async (dispatch) => {\n//   try {\n//     const { data } = await api.fetchStickyMessage(orgId, stickyMessageId);\n//     console.log(\"ACTION\")\n//     console.log(data);\n//     dispatch({\n//       type: FETCH_STICKY_MESSAGE,\n//       payload: data\n//     })\n//   } catch (error) {\n//     console.log(error)\n//     errorFlashMessage(error, dispatch, \"danger\");\n//   }\n// }\n\nexport const createIssue = (orgId, projectId, newIssue) => async (dispatch, getState) => {\n  try {\n    const { data } = await api.createIssue(orgId, projectId, newIssue);\n    dispatch({\n      type: CREATE_ISSUE,\n      payload: data\n    });\n    addFlashMessage(\"Issue successfully created.\", dispatch)\n  } catch (error) {\n    console.log(error)\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n}\n\nexport const updateIssue = (orgId, projectId, issueId, issueParams) => async (dispatch, getState) => {\n  try {\n    const { data } = await api.updateIssue(orgId, projectId, issueId, issueParams);\n    dispatch({\n      type: UPDATE_ISSUE,\n      payload: data\n    });\n    // addFlashMessage(\"Post successfully updated.\", dispatch)\n  } catch (error) {\n    console.log(error);\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n}\n\nexport const deleteIssue = (orgId, projectId, issueId) => async (dispatch, getState) => {\n  try {\n    await api.deleteIssue(orgId, projectId, issueId);\n    dispatch({\n      type: DELETE_ISSUE,\n      payload: issueId\n    });\n    addFlashMessage(\"Issue successfully deleted.\", dispatch)\n  } catch (error) {\n    console.log(error);\n    errorFlashMessage(error, dispatch, \"danger\");\n  }\n}"]},"metadata":{},"sourceType":"module"}