{"ast":null,"code":"var _JSON$parse;\n\nimport axios from 'axios'; // set token if it's in localStorage\n\nlet token = (_JSON$parse = JSON.parse(localStorage.getItem('auth'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.token;\nlet configFromLocalStorage = null;\n\nif (token) {\n  configFromLocalStorage = {\n    headers: {\n      \"x-auth-token\": token\n    }\n  };\n}\n\nconst BASEURL = 'http://localhost:5000';\nconst projectsURL = `${BASEURL}/projects`;\nconst organizationsURL = `${BASEURL}/organizations`;\nconst logInURL = `${BASEURL}/auth/login`;\nconst usersURL = `${BASEURL}/users`; // Projects\n\nexport const fetchProjects = orgId => {\n  return axios.get(`${organizationsURL}/${orgId}/projects`);\n};\nexport const createProject = (newProject, orgId, userToken = token) => {\n  console.log(\"URL\");\n  console.log(`${organizationsURL}/${orgId}/projects`);\n  return axios.post(`${organizationsURL}/${orgId}/projects`, newProject, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const fetchProject = projectId => axios.get(`${projectsURL}/${projectId}`);\nexport const updateProject = (projectId, postParams, userToken = token) => {\n  return axios.patch(`${projectsURL}/${projectId}`, postParams, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const deleteProject = (projectId, userToken = token) => {\n  console.log(userToken);\n  return axios.delete(`${projectsURL}/${projectId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n}; // Organizations\n\nexport const fetchOrganizations = (userToken = token) => {\n  return axios.get(organizationsURL, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const createOrganization = (newOrganization, userToken = token) => {\n  return axios.post(organizationsURL, newOrganization, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const fetchOrganization = (organizationId, userToken = token) => {\n  return axios.get(`${organizationsURL}/${organizationId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const updateOrganization = (organizationId, organizationParams, userToken = token) => {\n  return axios.patch(`${organizationsURL}/${organizationId}`, organizationParams, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const deleteOrganization = (organizationId, userToken = token) => {\n  return axios.delete(`${organizationsURL}/${organizationId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n}; // Users\n\nexport const logIn = logInData => axios.post(logInURL, logInData);\nexport const fetchLoggedInUser = userId => axios.get(`${usersURL}/${userId}`);\nexport const updateUser = (userId, userParams, config = configFromLocalStorage) => axios.patch(`${usersURL}/${userId}`, userParams, config);\nexport const createUser = userParams => axios.post(usersURL, userParams);","map":{"version":3,"sources":["/Users/mymac/repos/issue-tracker-mern/client/src/api/index.js"],"names":["axios","token","JSON","parse","localStorage","getItem","configFromLocalStorage","headers","BASEURL","projectsURL","organizationsURL","logInURL","usersURL","fetchProjects","orgId","get","createProject","newProject","userToken","console","log","post","fetchProject","projectId","updateProject","postParams","patch","deleteProject","delete","fetchOrganizations","createOrganization","newOrganization","fetchOrganization","organizationId","updateOrganization","organizationParams","deleteOrganization","logIn","logInData","fetchLoggedInUser","userId","updateUser","userParams","config","createUser"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n// set token if it's in localStorage\nlet token = JSON.parse(localStorage.getItem('auth'))?.token;\nlet configFromLocalStorage = null;\nif (token) {\n  configFromLocalStorage = { \n    headers: { \n      \"x-auth-token\": token\n    }\n  }\n} \n\nconst BASEURL = 'http://localhost:5000';\n\nconst projectsURL =`${BASEURL}/projects`;\n\nconst organizationsURL =`${BASEURL}/organizations`;\n\nconst logInURL = `${BASEURL}/auth/login`;\n\nconst usersURL = `${BASEURL}/users`\n\n\n\n// Projects\n\nexport const fetchProjects = (orgId) => {\n  return axios.get(`${organizationsURL}/${orgId}/projects`);\n}\n\nexport const createProject = (newProject, orgId, userToken = token) =>  {\n  console.log(\"URL\")\n  console.log(`${organizationsURL}/${orgId}/projects`)\n  return axios.post(`${organizationsURL}/${orgId}/projects`, newProject, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\nexport const fetchProject = (projectId) => axios.get(`${projectsURL}/${projectId}`);\n\n\nexport const updateProject = (projectId, postParams, userToken = token) => {\n  return axios.patch(`${projectsURL}/${projectId}`, postParams, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  })\n}\n\nexport const deleteProject = (projectId, userToken = token) =>  {\n  console.log(userToken)\n  return axios.delete(`${projectsURL}/${projectId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\n// Organizations\nexport const fetchOrganizations = (userToken = token) => {\n  return axios.get(organizationsURL, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n} \n\nexport const createOrganization = (newOrganization, userToken = token) =>  {\n  return axios.post(organizationsURL, newOrganization, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\nexport const fetchOrganization = (organizationId, userToken = token) => {\n  return axios.get(`${organizationsURL}/${organizationId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\nexport const updateOrganization = (organizationId, organizationParams, userToken = token) => {\n  return axios.patch(`${organizationsURL}/${organizationId}`, organizationParams, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  })\n}\n\nexport const deleteOrganization = (organizationId, userToken = token) =>  {\n  return axios.delete(`${organizationsURL}/${organizationId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\n\n// Users\n\nexport const logIn = (logInData) => axios.post(logInURL, logInData);\n\nexport const fetchLoggedInUser = (userId) => axios.get(`${usersURL}/${userId}`);\n\nexport const updateUser = (userId, userParams, config = configFromLocalStorage) => axios.patch(`${usersURL}/${userId}`, userParams, config)\n\nexport const createUser = (userParams) => axios.post(usersURL, userParams);\n\n"]},"metadata":{},"sourceType":"module"}