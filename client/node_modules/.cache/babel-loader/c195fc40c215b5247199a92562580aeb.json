{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/repos/mern-boilerplate/client/src/components/posts/EditPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPost, updatePost } from '../../actions/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditPost = ({\n  match,\n  history\n}) => {\n  _s();\n\n  const [formData, setFormData] = useState({\n    title: \"\",\n    body: \"\"\n  });\n  const dispatch = useDispatch();\n  const post = useSelector(state => state.post);\n  useEffect(() => {\n    dispatch(getPost(match.params.id));\n  }, []);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(updatePost(match.params.id, formData));\n    history.push(`posts/${post._id}`);\n  };\n\n  if (post && formData.title === \"\" && formData.body === \"\") {\n    setFormData({\n      title: post.title,\n      body: post.body\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setFormData({ ...formData,\n            title: e.target.value\n          }),\n          value: formData.title,\n          className: \"form-control\",\n          id: \"email\",\n          \"aria-describedby\": \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"body\",\n          children: \"Body\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: e => setFormData({ ...formData,\n            body: e.target.value\n          }),\n          value: formData.body,\n          className: \"form-control\",\n          id: \"body\",\n          rows: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Save\",\n        className: \"btn btn-primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n};\n\n_s(EditPost, \"3wtMotPjx6FhvjMCrFQLq7Zv9+w=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = EditPost;\nexport default EditPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"sources":["/Users/mymac/repos/mern-boilerplate/client/src/components/posts/EditPost.js"],"names":["React","useEffect","useState","useSelector","useDispatch","getPost","updatePost","EditPost","match","history","formData","setFormData","title","body","dispatch","post","state","params","id","handleSubmit","event","preventDefault","push","_id","e","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPost, updatePost } from '../../actions/posts';\n\nconst EditPost = ({ match, history}) => {\n\n  const [formData, setFormData] = useState({\n    title: \"\",\n    body: \"\"\n  })\n\n  const dispatch = useDispatch();\n  const post = useSelector((state) => state.post);\n\n  useEffect(() => {\n    dispatch(getPost(match.params.id));\n  }, [])\n\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    dispatch(updatePost(match.params.id, formData));\n    history.push(`posts/${post._id}`)\n  }\n\n  if (post && formData.title === \"\" && formData.body === \"\") {\n    setFormData({\n      title: post.title,\n      body: post.body\n    });\n  }\n\n  return (\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">Title</label>\n            <input onChange={(e) => setFormData({ ...formData, title: e.target.value})} value={formData.title}className=\"form-control\" id=\"email\" aria-describedby=\"title\"/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"body\">Body</label>\n            <textarea \n            onChange={(e) => setFormData({ ...formData, body: e.target.value})}\n            value={formData.body} className=\"form-control\" id=\"body\" rows=\"3\"></textarea>\n          </div>\n           <input type=\"submit\" value=\"Save\" className=\"btn btn-primary\" />\n        </form>\n\n      </div>\n  )\n}\n\nexport default EditPost;"]},"metadata":{},"sourceType":"module"}