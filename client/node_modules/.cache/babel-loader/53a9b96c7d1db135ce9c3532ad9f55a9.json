{"ast":null,"code":"var _JSON$parse;\n\nimport axios from 'axios';\nimport comment from '../../../server/models/comment'; // set token if it's in localStorage\n\nlet token = (_JSON$parse = JSON.parse(localStorage.getItem('auth'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.token;\nlet configFromLocalStorage = null;\n\nif (token) {\n  configFromLocalStorage = {\n    headers: {\n      \"x-auth-token\": token\n    }\n  };\n}\n\nconst BASEURL = 'http://localhost:5000';\nconst projectsURL = `${BASEURL}/projects`;\nconst organizationsURL = `${BASEURL}/organizations`;\nconst logInURL = `${BASEURL}/auth/login`;\nconst usersURL = `${BASEURL}/users`;\nconst stickyMessagesURL = `${BASEURL}/stickyMessages`;\nconst commentsURL = `${BASEURL}/comments`; // Projects\n\nexport const fetchProjects = orgId => {\n  return axios.get(`${organizationsURL}/${orgId}/projects`);\n};\nexport const createProject = (newProject, orgId, userToken = token) => {\n  console.log(\"URL\");\n  console.log(`${organizationsURL}/${orgId}/projects`);\n  return axios.post(`${organizationsURL}/${orgId}/projects`, newProject, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const fetchProject = (orgId, projectId) => {\n  console.log('url');\n  console.log(`${organizationsURL}/${orgId}/projects${projectId}`);\n  return axios.get(`${organizationsURL}/${orgId}/projects/${projectId}`);\n};\nexport const updateProject = (projectId, postParams, userToken = token) => {\n  return axios.patch(`${projectsURL}/${projectId}`, postParams, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const deleteProject = (projectId, userToken = token) => {\n  console.log(userToken);\n  return axios.delete(`${projectsURL}/${projectId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n}; // Organizations\n\nexport const fetchOrganizations = (userToken = token) => {\n  return axios.get(organizationsURL, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const createOrganization = (newOrganization, userToken = token) => {\n  return axios.post(organizationsURL, newOrganization, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const fetchOrganization = (organizationId, userToken = token) => {\n  return axios.get(`${organizationsURL}/${organizationId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const updateOrganization = (organizationId, organizationParams, userToken = token) => {\n  return axios.patch(`${organizationsURL}/${organizationId}`, organizationParams, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const deleteOrganization = (organizationId, userToken = token) => {\n  return axios.delete(`${organizationsURL}/${organizationId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n}; // Users\n\nexport const logIn = logInData => axios.post(logInURL, logInData);\nexport const fetchLoggedInUser = userId => axios.get(`${usersURL}/${userId}`);\nexport const updateUser = (userId, userParams, config = configFromLocalStorage) => axios.patch(`${usersURL}/${userId}`, userParams, config);\nexport const createUser = userParams => axios.post(usersURL, userParams); // StickyMessages\n\nexport const fetchStickyMessages = (objectType, objectId, userToken = token) => {\n  return axios.get(`${stickyMessagesURL}/${objectType}/${objectId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const createStickyMessage = (newStickyMessage, objectType, objectId, userToken = token) => {\n  return axios.post(`${stickyMessagesURL}/${objectType}/${objectId}`, {\n    stickyMessageParams: newStickyMessage,\n    objectType,\n    objectId\n  }, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const updateStickyMessage = (stickyMessageId, stickyMessageParams, userToken = token) => {\n  return axios.patch(`${stickyMessagesURL}/${stickyMessageId}`, stickyMessageParams, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const deleteStickyMessage = (stickyMessageId, userToken = token) => {\n  return axios.delete(`${stickyMessagesURL}/${stickyMessageId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n}; // Issues\n\nexport const fetchIssues = (organizationId, projectId, userToken = token) => {\n  return axios.get(`${BASEURL}/organizations/${organizationId}/projects/${projectId}/issues`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const createIssue = (organizationId, projectId, newIssue, userToken = token) => {\n  return axios.post(`${BASEURL}/organizations/${organizationId}/projects/${projectId}/issues`, {\n    issueParams: newIssue\n  }, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const deleteIssue = (organizationId, projectId, issueId, userToken = token) => {\n  return axios.delete(`${BASEURL}/organizations/${organizationId}/projects/${projectId}/issues/${issueId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const updateIssue = (organizationId, projectId, issueId, issueParams, userToken = token) => {\n  return axios.patch(`${BASEURL}/organizations/${organizationId}/projects/${projectId}/issues/${issueId}`, {\n    issueParams: issueParams\n  }, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n}; // Comments\n\nexport const fetchComments = (objectType, objectId, userToken = token) => {\n  return axios.get(`${commentsURL}/${objectType}/${objectId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const createComment = (newComment, objectType, objectId, userToken = token) => {\n  return axios.post(`${commentsURL}/${objectType}/${objectId}`, {\n    commentParams: newComment,\n    objectType,\n    objectId\n  }, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};","map":{"version":3,"sources":["/Users/mymac/repos/issue-tracker-mern/client/src/api/index.js"],"names":["axios","comment","token","JSON","parse","localStorage","getItem","configFromLocalStorage","headers","BASEURL","projectsURL","organizationsURL","logInURL","usersURL","stickyMessagesURL","commentsURL","fetchProjects","orgId","get","createProject","newProject","userToken","console","log","post","fetchProject","projectId","updateProject","postParams","patch","deleteProject","delete","fetchOrganizations","createOrganization","newOrganization","fetchOrganization","organizationId","updateOrganization","organizationParams","deleteOrganization","logIn","logInData","fetchLoggedInUser","userId","updateUser","userParams","config","createUser","fetchStickyMessages","objectType","objectId","createStickyMessage","newStickyMessage","stickyMessageParams","updateStickyMessage","stickyMessageId","deleteStickyMessage","fetchIssues","createIssue","newIssue","issueParams","deleteIssue","issueId","updateIssue","fetchComments","createComment","newComment","commentParams"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport comment from '../../../server/models/comment';\n\n// set token if it's in localStorage\nlet token = JSON.parse(localStorage.getItem('auth'))?.token;\nlet configFromLocalStorage = null;\nif (token) {\n  configFromLocalStorage = { \n    headers: { \n      \"x-auth-token\": token\n    }\n  }\n} \n\nconst BASEURL = 'http://localhost:5000';\n\nconst projectsURL =`${BASEURL}/projects`;\nconst organizationsURL =`${BASEURL}/organizations`;\nconst logInURL = `${BASEURL}/auth/login`;\nconst usersURL = `${BASEURL}/users`;\nconst stickyMessagesURL = `${BASEURL}/stickyMessages`;\nconst commentsURL = `${BASEURL}/comments`;\n\n\n\n// Projects\n\nexport const fetchProjects = (orgId) => {\n  return axios.get(`${organizationsURL}/${orgId}/projects`);\n}\n\nexport const createProject = (newProject, orgId, userToken = token) =>  {\n  console.log(\"URL\")\n  console.log(`${organizationsURL}/${orgId}/projects`)\n  return axios.post(`${organizationsURL}/${orgId}/projects`, newProject, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\nexport const fetchProject = (orgId, projectId) =>  { \n  console.log('url')\n  console.log(`${organizationsURL}/${orgId}/projects${projectId}`)\n  return axios.get(`${organizationsURL}/${orgId}/projects/${projectId}`);\n}\n\n\nexport const updateProject = (projectId, postParams, userToken = token) => {\n  return axios.patch(`${projectsURL}/${projectId}`, postParams, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  })\n}\n\nexport const deleteProject = (projectId, userToken = token) =>  {\n  console.log(userToken)\n  return axios.delete(`${projectsURL}/${projectId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\n// Organizations\nexport const fetchOrganizations = (userToken = token) => {\n  return axios.get(organizationsURL, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n} \n\nexport const createOrganization = (newOrganization, userToken = token) =>  {\n  return axios.post(organizationsURL, newOrganization, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\nexport const fetchOrganization = (organizationId, userToken = token) => {\n  return axios.get(`${organizationsURL}/${organizationId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\nexport const updateOrganization = (organizationId, organizationParams, userToken = token) => {\n  return axios.patch(`${organizationsURL}/${organizationId}`, organizationParams, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  })\n}\n\nexport const deleteOrganization = (organizationId, userToken = token) =>  {\n  return axios.delete(`${organizationsURL}/${organizationId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\n\n// Users\n\nexport const logIn = (logInData) => axios.post(logInURL, logInData);\n\nexport const fetchLoggedInUser = (userId) => axios.get(`${usersURL}/${userId}`);\n\nexport const updateUser = (userId, userParams, config = configFromLocalStorage) => axios.patch(`${usersURL}/${userId}`, userParams, config)\n\nexport const createUser = (userParams) => axios.post(usersURL, userParams);\n\n\n// StickyMessages\n\nexport const fetchStickyMessages = (objectType, objectId, userToken = token) => {\n  return axios.get(`${stickyMessagesURL}/${objectType}/${objectId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const createStickyMessage = (newStickyMessage, objectType, objectId, userToken = token) =>  {\n  return axios.post(`${stickyMessagesURL}/${objectType}/${objectId}`, {\n    stickyMessageParams: newStickyMessage,\n    objectType, \n    objectId\n  }, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const updateStickyMessage = (stickyMessageId, stickyMessageParams, userToken = token) => {\n  return axios.patch(`${stickyMessagesURL}/${stickyMessageId}`, stickyMessageParams, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  })\n}\n\nexport const deleteStickyMessage = (stickyMessageId, userToken = token) =>  {\n  return axios.delete(`${stickyMessagesURL}/${stickyMessageId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\n\n// Issues\n\nexport const fetchIssues = (organizationId, projectId, userToken = token) => {\n  return axios.get(`${BASEURL}/organizations/${organizationId}/projects/${projectId}/issues`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\nexport const createIssue = (organizationId, projectId, newIssue, userToken = token) =>  {\n  return axios.post(`${BASEURL}/organizations/${organizationId}/projects/${projectId}/issues`, {\n    issueParams: newIssue\n  }, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const deleteIssue = (organizationId, projectId, issueId, userToken = token) =>  {\n  return axios.delete(`${BASEURL}/organizations/${organizationId}/projects/${projectId}/issues/${issueId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const updateIssue = (organizationId, projectId, issueId, issueParams, userToken = token) =>  {\n  return axios.patch(`${BASEURL}/organizations/${organizationId}/projects/${projectId}/issues/${issueId}`, {\n    issueParams: issueParams\n  }, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\n// Comments\n\nexport const fetchComments = (objectType, objectId, userToken = token) => {\n  return axios.get(`${commentsURL}/${objectType}/${objectId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const createComment = (newComment, objectType, objectId, userToken = token) =>  {\n  return axios.post(`${commentsURL}/${objectType}/${objectId}`, {\n    commentParams: newComment,\n    objectType, \n    objectId\n  }, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}